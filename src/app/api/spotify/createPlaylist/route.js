import { getServerSession } from "next-auth/next";
import { authOptions } from "../../../api/auth/[...nextauth]/route";
import axios from "axios";
import qs from "qs";
const client_id = process.env.SPOTIFY_CLIENT_ID;
const client_secret = process.env.SPOTIFY_CLIENT_SECRET;
const basic = Buffer.from(`${client_id}:${client_secret}`).toString("base64");
import sortTracksByAudioFeatures from "../../../../lib/sortTracksByAudioFeatures";
import processSortedTracks from "../../../../lib/processSortedTracks";

export async function GET(request) {
  const session = await getServerSession(authOptions);

  async function getAccessToken() {
    var data = qs.stringify({
      grant_type: "refresh_token",
      refresh_token: session.refreshToken,
    });

    try {
      const response = await axios.post(
        "https://accounts.spotify.com/api/token",
        data,
        {
          headers: {
            Authorization: `Basic ${basic}`,
            "Content-Type": "application/x-www-form-urlencoded",
          },
        }
      );
      return { status: 200, data: response.data };
    } catch (error) {
      return error;
    }
  }

  async function getTopTracks(props) {
    try {
      const response = await axios.get(
        `https://api.spotify.com/v1/me/top/tracks?time_range=short_term&limit=50`,
        {
          headers: {
            Authorization: `Bearer ${props.accessToken.data.access_token}`,
            "Content-Type": "application/json",
          },
        }
      );
      return { status: 200, data: response.data };
    } catch (error) {
      return error;
    }
  }

  async function getAudioFeatures(props) {
    try {
      const response = await axios.get(
        props.url,

        {
          headers: {
            Authorization: `Bearer ${props.accessToken.data.access_token}`,
          },
        }
      );
      return { status: 200, data: response.data };
    } catch (error) {
      return error;
    }
  }

  async function createPlaylist(props) {
    var createPlaylistURL =
      "https://api.spotify.com/v1/users/" +
      (await session.providerAccountId) +
      "/playlists";
    console.log(createPlaylistURL);
    try {
      const response = await axios.post(
        createPlaylistURL,
        {
          name: props.title,
          description: props.description,
        },
        {
          headers: {
            Authorization: `Bearer ${props.accessToken.data.access_token}`,
            "Content-Type": "application/json",
          },
        }
      );
      return { status: 200, data: response.data };
    } catch (error) {
      return error;
    }
  }

  async function addTracks(props) {
    const url =
      "https://api.spotify.com/v1/playlists/" +
      (await props.playlistID) +
      "/tracks";
    try {
      const response = await axios.post(url, props.addObject, {
        headers: {
          Authorization: `Bearer ${props.accessToken.data.access_token}`,
          "Content-Type": "application/json",
        },
      });
      return { status: 200, data: response.data };
    } catch (error) {
      return error;
    }
  }

  var baseimage = ``;

  async function uploadCover(props) {
    try {
      const response = await axios.put(
        `https://api.spotify.com/v1/playlists/` + props.playlistID + `/images`,
        baseimage,

        {
          headers: {
            Authorization: `Bearer ${props.accessToken.data.access_token}`,
            "Content-Type": "image/jpeg",
          },
        }
      );
      return { status: 200, data: response.data };
    } catch (error) {
      return error;
    }
  }

  async function getPlaylist(props) {
    try {
      const response = await axios.get(
        `https://api.spotify.com/v1/playlists/` + props.playlistID,

        {
          headers: {
            Authorization: `Bearer ${props.accessToken.data.access_token}`,
          },
        }
      );
      return { status: 200, data: response.data };
    } catch (error) {
      return error;
    }
  }

  const accessToken = await getAccessToken();
  if ((await accessToken.status) != 200) {
    return Response.json({ error: accessToken.message });
  }
  const topTracks = await getTopTracks({
    accessToken: accessToken,
  });
  if ((await topTracks.status) != 200) {
    return Response.json({ error: topTracks.message });
  }
  // if ((await topTracks.status) != 200) {
  //   return Response.json({ error: topTracks.message });
  // } else {
  //   return Response.json(topTracks);
  // }

  var trackIDS = [];
  await topTracks.data.items.forEach(function (track) {
    trackIDS.push(track.id);
  });
  const urlQuery = await trackIDS.join("%2C");
  const url = "https://api.spotify.com/v1/audio-features?ids=" + urlQuery;

  const audioFeatures = await getAudioFeatures({
    accessToken: accessToken,
    url: url,
  });
  if ((await audioFeatures.status) != 200) {
    return Response.json({ error: audioFeatures.message });
  }
  // if ((await audioFeatures.status) != 200) {
  //   return Response.json({ error: audioFeatures.message });
  // } else {
  //   return Response.json(audioFeatures);
  // }

  //SORT TRACKS BY AUDIOFEATURES
  const sortedTracks = await sortTracksByAudioFeatures(audioFeatures.data);
  console.log(sortedTracks);

  const proccessedTracks = await processSortedTracks(sortedTracks);
  console.log(proccessedTracks);

  const createdPlaylist = await createPlaylist({
    accessToken: accessToken,
    title: "SELF CARE",
    description:
      "My personalized SELF CARE playlist. Create yours at kareenlomax.com/selfcare.",
    proccessedTracks: proccessedTracks,
  });

  var tracksArray = [];
  var tracksToAdd = [];

  await proccessedTracks.forEach(function (trackID) {
    var trackuri = "spotify:track:" + trackID;
    tracksToAdd.push(trackuri);
    tracksArray.push({ uri: trackuri });
  });

  var tracksObject = await { tracks: tracksArray };
  var addObject = await { uris: tracksToAdd };

  const addedTracks = await addTracks({
    accessToken: accessToken,
    playlistID: createdPlaylist.data.id,
    addObject: await addObject,
  });

  const updatedCover = await uploadCover({
    accessToken: accessToken,
    playlistID: createdPlaylist.data.id,
  });

  const playlist = await getPlaylist({
    accessToken: accessToken,
    playlistID: createdPlaylist.data.id,
  });

  return Response.json({
    playlistID: createdPlaylist.data.id,
    playlist: playlist,
  });
}
